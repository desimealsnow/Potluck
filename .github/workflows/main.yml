name: CI / CD Pipeline

on:
  push:
    branches: [main, 'release/**']
  pull_request:
    branches: [main]

env:
  NODE_ENV: test

#######################################################################
# 0️⃣  Dynamically build the workspace matrix + skip-list
#######################################################################
jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix:              ${{ steps.collect.outputs.matrix }}
      skip_test_workspaces: ${{ steps.collect.outputs.skip_test_workspaces }}
    steps:
      - uses: actions/checkout@v3

      - id: collect
        name: Build workspace matrix & skip list
        shell: bash
        run: |
          ############################################################
          # 1.  Workspaces to SKIP when running tests
          ############################################################
          SKIP_TEST_WORKSPACES="apps/mobile apps/web"
          echo "skip_test_workspaces=${SKIP_TEST_WORKSPACES}" >> "$GITHUB_OUTPUT"

          ############################################################
          # 2.  Resolve workspace globs from package.json → directories
          ############################################################
          dirs=()
          for glob in $(jq -r '.workspaces[]' package.json); do
            for dir in $glob; do
              [ -f "$dir/package.json" ] && dirs+=("$dir")
            done
          done

          ############################################################
          # 3.  Unique, compact JSON array for the matrix
          ############################################################
          json_arr=$(printf '%s\n' "${dirs[@]}" | sort -u | jq -R . | jq -cs .)
          echo "matrix=${json_arr}" >> "$GITHUB_OUTPUT"

#######################################################################
# 1️⃣  Build, Lint, Type-check & (optionally) Test every workspace
#######################################################################
  build-and-test:
    name: Lint · Type-check · Test (${{ matrix.workspace }})
    runs-on: ubuntu-latest
    needs: set-matrix
    strategy:
      matrix:
        node-version: [18.x]
        workspace: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      # ──────────────────────────────
      # ↓ Non-blocking Lint
      # ──────────────────────────────
      - name: Lint (non-blocking)
        continue-on-error: true
        run: |
          npm run lint --workspace=${{ matrix.workspace }} || true

      # ──────────────────────────────
      # ↓ Non-blocking Type-check
      # ──────────────────────────────
      - name: Type-check (non-blocking)
        continue-on-error: true
        run: |
          npm run typecheck --workspace=${{ matrix.workspace }} || true

      # ──────────────────────────────
      # ↓ Conditionally run Vitest
      # ──────────────────────────────
      - name: Conditionally test with Vitest
        env:
          SKIP_TEST_WORKSPACES: ${{ needs.set-matrix.outputs.skip_test_workspaces }}
        run: |
          # Skip whole test phase for selected workspaces
          for skip in $SKIP_TEST_WORKSPACES; do
            if [ "$skip" = "${{ matrix.workspace }}" ]; then
              echo "▶︎  Skipping tests for ${{ matrix.workspace }}"
              exit 0
            fi
          done

          # Prefer test:coverage → vitest run --coverage
          if npm pkg get scripts.test:coverage --workspace=${{ matrix.workspace }} | grep -qv null; then
            echo "▶︎  Running test:coverage in ${{ matrix.workspace }}"
            npm run test:coverage --workspace=${{ matrix.workspace }}

          # Fallback to plain test → vitest (add --coverage flag here)
          elif npm pkg get scripts.test --workspace=${{ matrix.workspace }} | grep -qv null; then
            echo "▶︎  Running test (with --coverage) in ${{ matrix.workspace }}"
            npm run test --workspace=${{ matrix.workspace }} -- --coverage

          # No test script defined
          else
            echo "⚠︎  No test script for ${{ matrix.workspace }} – skipping."
          fi

      # ──────────────────────────────
      # ↓ Upload coverage (always runs)
      # ──────────────────────────────
      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # 2️⃣ Deploy to Staging (just connect + optional ping)
  # deploy-staging:
  #   name: Deploy to Staging
  #   needs: build-and-test
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3


  #     - name: Authenticate with Supabase
  #       env:
  #         SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  #         SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  #       run: npx supabase@latest login --service-role

  #     # ── SKIPPING MIGRATIONS ─────────────────────────────
  #     # - name: Run DB migrations
  #     #   run: supabase db push
  #     # ───────────────────────────────────────────────────

  #     - name: (Optional) Ping DB
  #       env:
  #         SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }} # e.g. postgres://...
  #       run: |
  #         echo "select now();" | supabase db query --db-url "$SUPABASE_DB_URL"

  #     - name: Deploy Edge Functions (skip if none yet)
  #       if: ${{ env.DEPLOY_EDGE_FUNCTIONS != 'false' }}
  #       run: npx supabase@latest functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

  # 3️⃣ Deploy to Production (same pattern)
  # deploy-production:
  #   name: Deploy to Production
  #   needs: build-and-test
  #   if: startsWith(github.ref, 'refs/heads/release/')
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Supabase CLI
  #       run: npm install -g supabase

  #     - name: Authenticate with Supabase
  #       env:
  #         SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  #         SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  #       run: supabase login --service-role

  #     # ── SKIPPING MIGRATIONS FOR NOW ─────────────────────
  #     # - name: Run DB migrations
  #     #   run: supabase db push --production
  #     # ───────────────────────────────────────────────────

  #     - name: (Optional) Ping DB
  #       env:
  #         SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
  #       run: |
  #         echo "select now();" | supabase db query --db-url "$SUPABASE_DB_URL"

  #     - name: Deploy Edge Functions (skip if none yet)
  #       if: ${{ env.DEPLOY_EDGE_FUNCTIONS != 'false' }}
  #       run: supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --production
