name: CI / CD Pipeline

on:
  push:
    branches:
      - main
      - release/**
  pull_request:
    branches:
      - main

env:
  NODE_ENV: test

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      skip_test_workspaces: ${{ steps.set-matrix.outputs.skip_test_workspaces }}
    steps:
      - uses: actions/checkout@v3
      - name: Set workspaces test matrix
        id: set-matrix
        run: |
          SKIP_TEST_WORKSPACES="apps/mobile apps/web"
          workspaces=$(jq -r '.workspaces[]' package.json)
          dirs=()
          for glob in $workspaces; do
            for dir in $glob; do
              if [ -f "$dir/package.json" ]; then
                dirs+=("$dir")
              fi
            done
          done
          json_arr=$(printf '%s\n' "${dirs[@]}" | jq -R . | jq -s .)
          echo "matrix=$json_arr" >> $GITHUB_OUTPUT
          echo "skip_test_workspaces=$SKIP_TEST_WORKSPACES" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build, Lint, Typecheck & Test (All Workspaces)
    runs-on: ubuntu-latest
    needs: set-matrix
    strategy:
      matrix:
        node-version: [18.x]
        workspace: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --workspace=${{ matrix.workspace }}

      - name: Typecheck
        run: npm run typecheck --workspace=${{ matrix.workspace }}

      - name: Conditionally test
        env:
          SKIP_TEST_WORKSPACES: ${{ needs.set-matrix.outputs.skip_test_workspaces }}
        run: |
          # Test if current workspace is in the skip list
          for skip in $SKIP_TEST_WORKSPACES; do
            if [ "$skip" = "${{ matrix.workspace }}" ]; then
              echo "Skipping test for ${{ matrix.workspace }} (in SKIP_TEST_WORKSPACES)"
              exit 0
            fi
          done
          npm test --workspace=${{ matrix.workspace }} -- --coverage
      - name: Upload coverage to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Authenticate with Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: supabase login --service-role

      - name: Run DB migrations
        run: supabase db push

      - name: Deploy Edge Functions
        run: supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}

  deploy-production:
    name: Deploy to Production
    needs: build-and-test
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Authenticate with Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: supabase login --service-role

      - name: Run DB migrations
        run: supabase db push --production

      - name: Deploy Edge Functions
        run: supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }} --production
