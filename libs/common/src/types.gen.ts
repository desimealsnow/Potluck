/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sign up */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SignUp"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Login"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log out (access-token in Authorization header) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search / list locations */
        get: {
            parameters: {
                query?: {
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Location"][];
                    };
                };
            };
        };
        put?: never;
        /** Resolve or create a location row */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Location"];
                };
            };
            responses: {
                /** @description Created / existing row returned */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List events I host or attend */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of records to return */
                    limit?: components["parameters"]["limit"];
                    /** @description Offset for pagination */
                    offset?: components["parameters"]["offset"];
                    /** @description Optional filter by event status */
                    status?: components["schemas"]["EventStatus"];
                    /** @description Filter events whose start time is after the given timestamp */
                    startsAfter?: string;
                    /** @description Filter events whose start time is before the given timestamp */
                    startsBefore?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaginatedEventSummary"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        put?: never;
        /** Create an event with initial items */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EventCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventWithItems"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        /** Get single event with items & participants */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFull"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        post?: never;
        /** Delete / cancel event */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        options?: never;
        head?: never;
        /** Host updates event details */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EventUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFull"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        trace?: never;
    };
    "/events/{eventId}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Publish a **draft** event (draft → published) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Published */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFull"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a **published** event (published → cancelled) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EventCancel"];
                };
            };
            responses: {
                /** @description Cancelled */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFull"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a **published** event as completed */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventFull"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        /** List items for event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Item"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        /** Add an item slot to the event */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
            responses: {
                /** @description Completed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ItemCreate"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
                /** @description Item ID */
                itemId: components["parameters"]["itemId"];
            };
            cookie?: never;
        };
        /** Get single item */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Item ID */
                    itemId: components["parameters"]["itemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Item"];
                    };
                };
            };
        };
        /** Update name/category/per-guest qty */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Item ID */
                    itemId: components["parameters"]["itemId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /** Delete item slot */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Item ID */
                    itemId: components["parameters"]["itemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/items/{itemId}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
                /** @description Item ID */
                itemId: components["parameters"]["itemId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign item (self or specified user) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Item ID */
                    itemId: components["parameters"]["itemId"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ItemAssign"];
                };
            };
            responses: {
                /** @description Assigned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Unassign item */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Item ID */
                    itemId: components["parameters"]["itemId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Unassigned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
            };
            cookie?: never;
        };
        /** List all participants in an event */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of participants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Participant"][];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        put?: never;
        /** Invite a user or self-RSVP */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ParticipantAdd"];
                };
            };
            responses: {
                /** @description Participant added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/participants/{partId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Event ID */
                eventId: components["parameters"]["eventId"];
                /** @description Participant ID */
                partId: components["parameters"]["partId"];
            };
            cookie?: never;
        };
        /** Get details of a participant (including RSVP) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Participant ID */
                    partId: components["parameters"]["partId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Participant details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Participant"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        /** Update RSVP or participant details */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Participant ID */
                    partId: components["parameters"]["partId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ParticipantUpdate"];
                };
            };
            responses: {
                /** @description RSVP updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Participant"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        post?: never;
        /** Remove (kick/leave) a participant */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    eventId: components["parameters"]["eventId"];
                    /** @description Participant ID */
                    partId: components["parameters"]["partId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Participant removed */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/participants/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Bulk invite participants (host only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        invites?: components["schemas"]["ParticipantBulkAdd"][];
                    };
                };
            };
            responses: {
                /** @description Participants added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequestError"];
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
                409: components["responses"]["ConflictError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{eventId}/participants/{partId}/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Re-send invite (host only) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Invite resent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["UnauthorizedError"];
                403: components["responses"]["ForbiddenError"];
                404: components["responses"]["NotFoundError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active pricing plans */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BillingPlan"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/checkout/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start checkout for a subscription plan */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        plan_id: string;
                        /** @enum {string} */
                        provider: "stripe" | "paypal" | "razorpay" | "square" | "lemonsqueezy";
                    };
                };
            };
            responses: {
                /** @description Checkout URL created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CheckoutSession"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get my active / past subscriptions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Subscription"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/webhook/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stripe webhook endpoint
         * @description Handles checkout.session.*, invoice.*, payment_intent.* events.
         *     Stripe signs the payload; verify in the handler.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Received */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/payment-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user's payment methods */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethod"][];
                    };
                };
            };
        };
        put?: never;
        /** Add new payment method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentMethodCreate"];
                };
            };
            responses: {
                /** @description Payment method added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethod"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/payment-methods/{methodId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment method ID */
                methodId: string;
            };
            cookie?: never;
        };
        /** Get specific payment method */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    methodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethod"];
                    };
                };
            };
        };
        /** Update payment method */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    methodId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PaymentMethodUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PaymentMethod"];
                    };
                };
            };
        };
        post?: never;
        /** Remove payment method */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    methodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Payment method removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/payment-methods/{methodId}/set-default": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Payment method ID */
                methodId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set as default payment method */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment method ID */
                    methodId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Set as default */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user invoices */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice ID */
                invoiceId: string;
            };
            cookie?: never;
        };
        /** Get specific invoice */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/invoices/{invoiceId}/download": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice ID */
                invoiceId: string;
            };
            cookie?: never;
        };
        /** Download invoice PDF */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description PDF file */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscriptions/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Subscription ID */
                subscriptionId: string;
            };
            cookie?: never;
        };
        /** Get specific subscription */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Subscription"];
                    };
                };
            };
        };
        /** Update subscription */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SubscriptionUpdate"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Subscription"];
                    };
                };
            };
        };
        post?: never;
        /** Cancel subscription */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Subscription canceled */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscriptions/{subscriptionId}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Subscription ID */
                subscriptionId: string;
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reactivate canceled subscription */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscription ID */
                    subscriptionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Reactivated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Subscription"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/_internal/schema-id-param": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Dummy endpoint to emit IdParam schema for codegen/validation */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Returns IdParam object */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EventIdParam"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignUp: {
            /** Format: email */
            email: string;
            password: string;
            displayName?: string;
        };
        Login: {
            /** Format: email */
            email: string;
            password: string;
        };
        Location: {
            name: string;
            formatted_address?: string;
            latitude?: number;
            longitude?: number;
        };
        ItemCreate: {
            name: string;
            category?: string;
            per_guest_qty: number;
        };
        /** @description All fields optional for patch */
        ItemUpdate: components["schemas"]["ItemCreate"];
        ItemAssign: {
            /** Format: uuid */
            user_id?: string;
        };
        Error: {
            message: string;
            /** @description Optional machine-readable error code */
            code?: string;
        };
        EventIdParam: {
            /** Format: uuid */
            eventId: string;
        };
        EventCreate: components["schemas"]["EventBase"] & {
            items: components["schemas"]["ItemCreate"][];
        };
        EventBase: {
            title: string;
            description?: string;
            /** Format: date-time */
            event_date: string;
            min_guests: number;
            max_guests?: number;
            /** @enum {string} */
            status?: "draft" | "published" | "cancelled" | "completed" | "purged";
            /** @enum {string} */
            meal_type: "veg" | "nonveg" | "mixed";
            location: components["schemas"]["Location"];
        };
        EventWithItems: {
            event?: Record<string, never>;
            items?: components["schemas"]["ItemCreate"][];
        };
        EventSummary: {
            /** Format: uuid */
            id: string;
            title: string;
            /** Format: date-time */
            event_date: string;
            attendee_count: number;
            /** @enum {string} */
            meal_type: "veg" | "nonveg" | "mixed";
        };
        PaginatedEventSummary: {
            data?: components["schemas"]["EventSummary"][];
            nextOffset?: number;
            totalCount?: number;
        };
        /** @enum {string} */
        EventStatus: "draft" | "published" | "cancelled" | "completed" | "purged";
        EventCore: components["schemas"]["EventBase"] & {
            /** Format: uuid */
            id: string;
            attendee_count: number;
            /** Format: uuid */
            created_by: string;
        };
        EventFull: {
            event: components["schemas"]["EventCore"];
            items: components["schemas"]["Item"][];
            participants: components["schemas"]["Participant"][];
        };
        EventUpdate: components["schemas"]["EventCreate"];
        ParticipantAdd: {
            /** Format: uuid */
            user_id: string;
            /** @enum {string} */
            status?: "invited" | "pending" | "accepted" | "declined" | "maybe";
        };
        ParticipantUpdate: {
            /** @enum {string} */
            status: "invited" | "pending" | "accepted" | "declined" | "maybe";
        };
        Participant: components["schemas"]["ParticipantAdd"] & {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            joined_at?: string;
        };
        ParticipantBulkAdd: {
            /** @description List of participants to invite */
            invites: components["schemas"]["ParticipantAdd"][];
        };
        Item: components["schemas"]["ItemCreate"] & {
            /** Format: uuid */
            id: string;
            required_qty: number;
            assigned_to?: string | null;
        };
        BillingPlan: {
            /** Format: uuid */
            id: string;
            price_id: string;
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            name: string;
            amount_cents: number;
            /** @example usd */
            currency: string;
            /** @enum {string} */
            interval: "month" | "year";
            is_active?: boolean;
            /** Format: date-time */
            created_at?: string;
        };
        PaymentIntentResponse: {
            /** Format: uri */
            checkout_url: string;
        };
        Subscription: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            plan_id: string;
            provider_subscription_id: string;
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            /** @enum {string} */
            status: "active" | "trialing" | "past_due" | "canceled" | "incomplete" | "incomplete_expired";
            /** Format: date-time */
            current_period_start?: string;
            /** Format: date-time */
            current_period_end: string;
            /** Format: date-time */
            trial_start?: string;
            /** Format: date-time */
            trial_end?: string;
            cancel_at_period_end?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
        };
        CheckoutSession: {
            /** Format: uri */
            checkout_url: string;
        };
        /** @description Payload required when the host cancels a published event. Servers must record the reason for audit purposes and may include it in guest notifications.
         *      */
        EventCancel: {
            /** @description Human-readable explanation shown to participants */
            reason: string;
            /**
             * @description If true (default), backend sends cancellation emails / push
             *     notifications. Hosts can suppress notifications for private events.
             *
             * @default true
             */
            notifyGuests: boolean;
        };
        PaymentMethod: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            method_id: string;
            is_default: boolean;
            brand?: string;
            last_four?: string;
            exp_month?: number;
            exp_year?: number;
            /** Format: date-time */
            created_at?: string;
        };
        PaymentMethodCreate: {
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            method_id: string;
            /** @default false */
            is_default: boolean;
        };
        PaymentMethodUpdate: {
            is_default?: boolean;
        };
        Invoice: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            subscription_id?: string;
            /** Format: uuid */
            user_id: string;
            invoice_id?: string;
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            amount_cents: number;
            /** @example usd */
            currency: string;
            /** @enum {string} */
            status: "draft" | "open" | "paid" | "void" | "uncollectible";
            /** Format: date-time */
            invoice_date: string;
            /** Format: date-time */
            paid_date?: string;
            /** Format: date-time */
            created_at?: string;
        };
        Payment: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            invoice_id: string;
            provider_transaction_id?: string;
            /** @enum {string} */
            provider: "stripe" | "paypal" | "razorpay" | "square"| "lemonsqueezy";
            amount_cents: number;
            /** @example usd */
            currency: string;
            /** @enum {string} */
            status: "pending" | "succeeded" | "failed" | "refunded";
            /** Format: date-time */
            paid_at?: string;
            /** Format: date-time */
            created_at?: string;
        };
        SubscriptionUpdate: {
            cancel_at_period_end?: boolean;
            /** Format: uuid */
            plan_id?: string;
        };
    };
    responses: {
        /** @description Access token missing or invalid */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description The caller lacks permission */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request conflicts with current resource state */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Request conflicts with current resource state */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: {
        /** @description Maximum number of records to return */
        limit: number;
        /** @description Offset for pagination */
        offset: number;
        /** @description Event ID */
        eventId: string;
        /** @description Item ID */
        itemId: string;
        /** @description Participant ID */
        partId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
