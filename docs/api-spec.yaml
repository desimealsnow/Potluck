openapi: 3.1.1
info:
  title: Potluck API
  version: "0.2.0"
servers:
  - url: http://localhost:3000/api/v1
paths:
  /auth/signup:
    post:
      summary: Sign up
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SignUp" }
      responses:
        "201": { description: Created }
        "400": { description: Validation error }
  /auth/login:
    post:
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Login" }
      responses:
        "200": { description: OK }
        "401": { description: Invalid credentials }
  /auth/logout:
    post:
      summary: Log out (access-token in Authorization header)
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Logged out }

  /locations:
    get:
      summary: Search / list locations
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: search
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Location" }
    post:
      summary: Resolve or create a location row
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Location" }
      responses:
        "201": { description: Created / existing row returned }

  /events:
    post:
      summary: Create an event with initial items
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EventCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventWithItems" }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
    get:
      description: "Search/list public events for discovery or events I host/attend"
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - name: q
          in: query
          description: Text search across event title and description
          schema:
            type: string
        - name: status
          in: query
          description: Optional filter by event status
          schema:
            $ref: "#/components/schemas/EventStatus"
        - name: dateFrom
          in: query
          description: Filter events starting from this date
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          description: Filter events ending before this date
          schema:
            type: string
            format: date-time
        - name: startsAfter
          in: query
          description: Filter events whose start time is after the given timestamp
          schema:
            type: string
            format: date-time
        - name: startsBefore
          in: query
          description: Filter events whose start time is before the given timestamp
          schema:
            type: string
            format: date-time
        - name: near
          in: query
          description: "Geosearch: lat,lon,radiusKm"
          schema:
            type: string
            example: "40.7128,-74.0060,10"
        - name: diet
          in: query
          description: Comma-separated dietary tags (veg,nonveg,mixed)
          schema:
            type: string
        - name: is_public
          in: query
          description: Filter by public events (omit for authenticated user's events)
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedEventSummary"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /events/{eventId}:
    parameters: [{ $ref: "#/components/parameters/eventId" }]
    get:
      summary: Get single event with items & participants
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventFull" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    patch:
      summary: Host updates event details
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EventUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventFull" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }
    delete:
      summary: Delete / cancel event
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: No Content }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  /events/{eventId}/publish:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Publish a **draft** event (draft → published)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Published
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventFull" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  /events/{eventId}/cancel:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Cancel a **published** event (published → cancelled)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/EventCancel" }
      responses:
        "200":
          description: Cancelled
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventFull" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  /events/{eventId}/complete:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Mark a **published** event as completed
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Completed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/EventFull" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  /events/{eventId}/availability:
    parameters:
      - $ref: "#/components/parameters/eventId"
    get:
      tags: [Events]
      summary: Get event capacity availability
      responses:
        "200":
          description: Availability data
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Availability" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/requests:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Create join request (guest creates pending request + soft hold)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/JoinRequestAdd" }
      responses:
        "201":
          description: Request created with hold
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": 
          description: Capacity unavailable or already requested
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    get:
      tags: [Events]
      summary: List join requests (host-only, paginated)
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - name: status
          in: query
          description: Filter by request status
          schema:
            $ref: "#/components/schemas/JoinRequestStatus"
      responses:
        "200":
          description: Join requests list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedJoinRequests"
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }

  /events/requests:
    get:
      tags: [Events]
      summary: List pending join requests across my hosted events
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Pending join requests
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaginatedJoinRequests" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
  /events/{eventId}/requests/{requestId}/approve:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Events]
      summary: Approve join request (host-only, atomic capacity check)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Request approved, participant created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409":
          description: Capacity unavailable
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /events/{eventId}/requests/{requestId}/decline:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Events]
      summary: Decline join request (host-only)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Request declined
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/requests/{requestId}/waitlist:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Events]
      summary: Move join request to waitlist (host-only)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Request waitlisted
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/requests/{requestId}/cancel:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Events]
      summary: Cancel join request (guest cancels own request)
      responses:
        "200":
          description: Request cancelled
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409":
          description: Request expired or in invalid state
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /events/{eventId}/requests/{requestId}/extend:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    post:
      tags: [Events]
      summary: Extend hold expiration (host-only, optional)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Hold extended
          content:
            application/json:
              schema: { $ref: "#/components/schemas/JoinRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/requests/{requestId}/reorder:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - name: requestId
        in: path
        required: true
        schema: { type: string, format: uuid }
    patch:
      tags: [Events]
      summary: Reorder a waitlisted request (host-only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [waitlist_pos]
              properties:
                waitlist_pos: { type: number }
      responses:
        "200": { description: Reordered }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/requests/promote:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Promote first eligible waitlisted request (host-only)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Promotion result
          content:
            application/json:
              schema:
                type: object
                properties:
                  moved: { type: integer }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }

  /events/{eventId}/items:
    parameters: [{ $ref: "#/components/parameters/eventId" }]
    get:
      summary: List items for event
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Item" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    post:
      summary: Add an item slot to the event
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemCreate" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  /events/{eventId}/items/{itemId}:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - $ref: "#/components/parameters/itemId"
    get:
      summary: Get single item
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Item" }
    put:
      summary: Update name/category/per-guest qty
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemUpdate" }
      responses:
        "200": { description: Updated }
    delete:
      summary: Delete item slot
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Deleted }

  /events/{eventId}/items/{itemId}/assign:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - $ref: "#/components/parameters/itemId"
    post:
      summary: Assign item (self or specified user)
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ItemAssign" }
      responses:
        "200": { description: Assigned }
    delete:
      summary: Unassign item
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Unassigned }
  # /events/{eventId}/participants: Invite or List Participants
  /events/{eventId}/participants:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      summary: Invite a user or self-RSVP
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ParticipantAdd" }
      responses:
        "201": { description: Participant added }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }
    get:
      summary: List all participants in an event
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of participants
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Participant" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/rebalance:
    parameters:
      - $ref: "#/components/parameters/eventId"
    post:
      tags: [Events]
      summary: Auto-assign unclaimed items to accepted participants
      security: [{ bearerAuth: [] }]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                max_per_user:
                  type: integer
                  minimum: 1
                  default: 2
      responses:
        "200":
          description: Rebalance result
          content:
            application/json:
              schema:
                type: object
                required: [assigned]
                properties:
                  assigned:
                    type: integer
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  /events/{eventId}/participants/{partId}/transfer:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - $ref: "#/components/parameters/partId"
    post:
      tags: [Participants]
      summary: Transfer RSVP to another user
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/TransferParticipantRequest" }
      responses:
        "200":
          description: Transfer completed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/TransferParticipantResponse" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  # /events/{eventId}/participants/{partId}: Get/Update/Kick/Leave
  /events/{eventId}/participants/{partId}:
    parameters:
      - $ref: "#/components/parameters/eventId"
      - $ref: "#/components/parameters/partId"
    get:
      summary: Get details of a participant (including RSVP)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Participant details
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Participant" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
    put:
      summary: Update RSVP or participant details
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ParticipantUpdate" }
      responses:
        "200":
          description: RSVP updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Participant" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }
    delete:
      summary: Remove (kick/leave) a participant
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Participant removed }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  # (Optional) Bulk invite
  /events/{eventId}/participants/bulk:
    post:
      summary: Bulk invite participants (host only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invites:
                  type: array
                  items: { $ref: "#/components/schemas/ParticipantBulkAdd" }
      responses:
        "201": { description: Participants added }
        "400": { $ref: "#/components/responses/BadRequestError" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "409": { $ref: "#/components/responses/ConflictError" }

  # (Optional) Re-send invite
  /events/{eventId}/participants/{partId}/resend:
    post:
      summary: Re-send invite (host only)
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Invite resent }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "403": { $ref: "#/components/responses/ForbiddenError" }
        "404": { $ref: "#/components/responses/NotFoundError" }

  # ---------- Subscription catalog ----------
  /billing/plans:
    get:
      summary: List active pricing plans
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/BillingPlan" }

  # ---------- Checkout for a new / upgraded subscription ----------
  /billing/checkout/subscription:
    post:
      summary: Start checkout for a subscription plan
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plan_id, provider]
              properties:
                plan_id: { type: string, format: uuid } # Internal plan ID
                provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
      responses:
        "200":
          description: Checkout URL created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CheckoutSession" }

  # ---------- Current user's subscription ----------
  /billing/subscriptions:
    get:
      summary: Get my active / past subscriptions
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Subscription" }

  # ---------- Stripe webhook (no auth) ----------
  /billing/webhook/stripe:
    post:
      summary: Stripe webhook endpoint
      description: |
        Handles checkout.session.*, invoice.*, payment_intent.* events.
        Stripe signs the payload; verify in the handler.
      requestBody:
        required: true
        content:
          application/json:
            schema: { description: "Stripe event object", type: object }
      responses:
        "200": { description: Received }

  # ---------- Payment Method Management ----------
  /billing/payment-methods:
    get:
      summary: List user's payment methods
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/PaymentMethod" }
    post:
      summary: Add new payment method
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PaymentMethodCreate" }
      responses:
        "201":
          description: Payment method added
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaymentMethod" }

  /billing/payment-methods/{methodId}:
    parameters:
      - name: methodId
        in: path
        required: true
        description: Payment method ID
        schema:
          type: string
          format: uuid
    get:
      summary: Get specific payment method
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaymentMethod" }
    put:
      summary: Update payment method
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/PaymentMethodUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/PaymentMethod" }
    delete:
      summary: Remove payment method
      security: [{ bearerAuth: [] }]
      responses:
        "204": { description: Payment method removed }

  /billing/payment-methods/{methodId}/set-default:
    parameters:
      - name: methodId
        in: path
        required: true
        description: Payment method ID
        schema:
          type: string
          format: uuid
    post:
      summary: Set as default payment method
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Set as default }

  # ---------- Invoice Management ----------
  /billing/invoices:
    get:
      summary: List user invoices
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Invoice" }

  /billing/invoices/{invoiceId}:
    parameters:
      - name: invoiceId
        in: path
        required: true
        description: Invoice ID
        schema:
          type: string
          format: uuid
    get:
      summary: Get specific invoice
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Invoice" }

  /billing/invoices/{invoiceId}/download:
    parameters:
      - name: invoiceId
        in: path
        required: true
        description: Invoice ID
        schema:
          type: string
          format: uuid
    get:
      summary: Download invoice PDF
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: PDF file
          content:
            application/pdf:
              schema:
                type: string
                format: binary

  # ---------- Subscription Management ----------
  /billing/subscriptions/{subscriptionId}:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        description: Subscription ID
        schema:
          type: string
          format: uuid
    get:
      summary: Get specific subscription
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
    put:
      summary: Update subscription
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/SubscriptionUpdate" }
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
    delete:
      summary: Cancel subscription
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: Subscription canceled }

  /billing/subscriptions/{subscriptionId}/reactivate:
    parameters:
      - name: subscriptionId
        in: path
        required: true
        description: Subscription ID
        schema:
          type: string
          format: uuid
    post:
      summary: Reactivate canceled subscription
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Reactivated
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Subscription" }
  /_internal/schema-id-param:
    get:
      summary: Dummy endpoint to emit IdParam schema for codegen/validation
      responses:
        "200":
          description: Returns IdParam object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventIdParam"

  # User Profile Management
  /user-profile/setup:
    post:
      summary: Complete user profile setup
      description: Complete the initial profile setup with display name, meal preferences, and location
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ProfileSetupRequest" }
      responses:
        "200":
          description: Profile setup completed successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ProfileSetupResponse" }
        "400":
          description: Validation error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ValidationError" }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          description: Internal server error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /user-profile/me:
    get:
      summary: Get current user profile
      description: Retrieve the current user's profile information
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserProfile" }
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: User profile not found
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
        "500":
          description: Internal server error
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    limit:
      name: limit
      in: query
      description: Maximum number of records to return
      schema:
        type: integer
        minimum: 1
        default: 20
    offset:
      name: offset
      in: query
      description: Offset for pagination
      schema:
        type: integer
        minimum: 0
        default: 0
    eventId:
      name: eventId
      in: path
      required: true
      description: Event ID
      schema:
        type: string
        format: uuid
    itemId:
      name: itemId
      in: path
      required: true
      description: Item ID
      schema:
        type: string
        format: uuid
    partId:
      name: partId
      in: path
      required: true
      description: Participant ID
      schema:
        type: string
        format: uuid


  schemas:
    # ── Auth ───────────────────────────────────
    SignUp:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        displayName: { type: string }
    Login:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    # ── Location ───────────────────────────────
    Location:
      type: object
      required: [name]
      properties:
        name: { type: string }
        formatted_address: { type: string }
        latitude: { type: number }
        longitude: { type: number }

    # ── Items ──────────────────────────────────
    ItemCreate:
      type: object
      required: [name, per_guest_qty]
      properties:
        name: { type: string }
        category: { type: string }
        per_guest_qty: { type: number, minimum: 0.01 }
    ItemUpdate:
      allOf:
        - $ref: "#/components/schemas/ItemCreate"
      description: All fields optional for patch
    ItemAssign:
      type: object
      properties:
        user_id: { type: string, format: uuid }
    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
        code:
          type: string
          description: Optional machine-readable error code
    # ── Event ──────────────────────────────────
    EventIdParam:
      type: object
      required: [eventId]
      properties:
        eventId: { type: string, format: uuid }

    # ── Join Requests ──────────────────────────────
    JoinRequestStatus:
      type: string
      enum: [pending, approved, declined, waitlisted, expired, cancelled]

    JoinRequestAdd:
      type: object
      required: [party_size]
      properties:
        party_size:
          type: integer
          minimum: 1
          description: Number of guests in the party
        note:
          type: string
          maxLength: 500
          description: Optional message to the host

    JoinRequest:
      allOf:
        - $ref: "#/components/schemas/JoinRequestAdd"
        - type: object
          required: [id, event_id, user_id, status, created_at]
          properties:
            id: { type: string, format: uuid }
            event_id: { type: string, format: uuid }
            user_id: { type: string, format: uuid }
            status: { $ref: "#/components/schemas/JoinRequestStatus" }
            hold_expires_at:
              type: string
              format: date-time
              description: When the capacity hold expires (for pending requests)
            created_at: { type: string, format: date-time }
            updated_at: { type: string, format: date-time }

    PaginatedJoinRequests:
      type: object
      properties:
        data:
          type: array
          items: { $ref: "#/components/schemas/JoinRequest" }
        nextOffset: { type: integer }
        totalCount: { type: integer }

    # ── Availability ───────────────────────────────
    Availability:
      type: object
      required: [total, confirmed, held, available]
      properties:
        total:
          type: integer
          description: Total event capacity
        confirmed:
          type: integer
          description: Sum of accepted participants party sizes
        held:
          type: integer
          description: Sum of pending request holds (not expired)
        available:
          type: integer
          description: Remaining capacity (total - confirmed - held)

    EventCreate:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required: [items]
          properties:
            items:
              type: array
              items: { $ref: "#/components/schemas/ItemCreate" }
    EventBase:
      type: object
      required: [title, event_date, min_guests, meal_type, location]
      properties:
        title: { type: string }
        description: { type: string }
        event_date: { type: string, format: date-time }
        min_guests: { type: integer, minimum: 1 }
        max_guests: { type: integer }
        capacity_total: { type: integer, minimum: 1, description: "Total event capacity for join requests" }
        status: { type: string, enum: [draft, published, cancelled, completed, purged] }
        meal_type: { type: string, enum: [veg, nonveg, mixed] }
        is_public: { type: boolean, default: false, description: "Whether event is discoverable by guests" }
        location: { $ref: "#/components/schemas/Location" }
    EventWithItems:
      type: object
      properties:
        event:
          type: object # TBD,   kept loose for now
        items:
          type: array
          items: { $ref: "#/components/schemas/ItemCreate" }
    EventSummary:
      type: object
      required: [id, title, event_date, attendee_count, meal_type]
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        event_date: { type: string, format: date-time }
        attendee_count: { type: integer }
        meal_type: { type: string, enum: [veg, nonveg, mixed] }
    PaginatedEventSummary:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/EventSummary"
        nextOffset:
          type: integer
        totalCount:
          type: integer
    EventStatus:
      type: string
      enum: [draft, published, cancelled, completed, purged]
    EventCore:
      allOf:
        - $ref: "#/components/schemas/EventBase"
        - type: object
          required: [id, attendee_count, created_by]
          properties:
            id: { type: string, format: uuid }
            attendee_count: { type: integer }
            created_by: { type: string, format: uuid }
    EventFull:
      type: object
      required: [event, items, participants]
      properties:
        event: { $ref: "#/components/schemas/EventCore" }
        items:
          type: array
          items: { $ref: "#/components/schemas/Item" }
        participants:
          type: array
          items: { $ref: "#/components/schemas/Participant" }

    EventUpdate:
      allOf:
        - $ref: "#/components/schemas/EventCreate"
      required: [] # all fields optional for PATCH/PUT semantics

    # ── Participants ───────────────────────────
    ParticipantAdd:
      type: object
      required: [user_id]
      properties:
        user_id: { type: string, format: uuid }
        party_size: { type: integer, minimum: 1, default: 1, description: "Number of people this participant represents" }
        status:
          { type: string, enum: [invited, pending, accepted, declined, maybe] }
    ParticipantUpdate:
      type: object
      required: [status]
      properties:
        status:
          { type: string, enum: [invited, pending, accepted, declined, maybe] }
    Participant:
      allOf:
        - $ref: "#/components/schemas/ParticipantAdd"
        - type: object
          properties:
            id: { type: string, format: uuid }
            joined_at: { type: string, format: date-time }
    ParticipantBulkAdd:
      type: object
      required:
        - invites
      properties:
        invites:
          type: array
          description: List of participants to invite
          items:
            $ref: '#/components/schemas/ParticipantAdd'
    Item:
      allOf:
        - $ref: "#/components/schemas/ItemCreate"
        - type: object
          required:
            - id
            - required_qty          # ← assigned_to no longer required
          properties:
            id:
              type: string
              format: uuid
            required_qty:
              type: number
            assigned_to:
              oneOf:                 # ← OpenAPI 3.1 ‘nullable’ pattern
                - type: string
                  format: uuid
                - type: "null"

    TransferParticipantRequest:
      type: object
      required: [new_user_id]
      properties:
        new_user_id:
          type: string
          format: uuid
        carry_items:
          type: boolean
          default: false

    TransferParticipantResponse:
      type: object
      required: [old_participant_id, new_participant_id]
      properties:
        old_participant_id:
          type: string
          format: uuid
        new_participant_id:
          type: string
          format: uuid
    BillingPlan:
      type: object
      required: [id, price_id, name, amount_cents, currency, interval, provider]
      properties:
        id: { type: string, format: uuid }
        price_id: { type: string } # Provider price ID (Stripe price_id, PayPal plan_id, etc.)
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        name: { type: string }
        amount_cents: { type: integer }
        currency: { type: string, example: usd }
        interval: { type: string, enum: [month, year] }
        is_active: { type: boolean }
        created_at: { type: string, format: date-time }

    PaymentIntentResponse:
      type: object
      required: [checkout_url]
      properties:
        checkout_url: { type: string, format: uri }
    Subscription:
      type: object
      required: [id, plan_id, provider_subscription_id, provider, status, current_period_end]
      properties:
        id: { type: string, format: uuid }
        plan_id: { type: string, format: uuid }
        provider_subscription_id: { type: string } # Generic provider subscription ID
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        status:
          type: string
          enum: [active, trialing, past_due, canceled, incomplete, incomplete_expired]
        current_period_start: { type: string, format: date-time }
        current_period_end: { type: string, format: date-time }
        trial_start: { type: string, format: date-time }
        trial_end: { type: string, format: date-time }
        cancel_at_period_end: { type: boolean }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    CheckoutSession:
      type: object
      required: [checkout_url]
      properties:
        checkout_url: { type: string, format: uri }

    EventCancel:
      type: object
      description: >
        Payload required when the host cancels a published event.
        Servers must record the reason for audit purposes and may include it
        in guest notifications.
      required:
        - reason
      properties:
        reason:
          type: string
          description: Human-readable explanation shown to participants
          minLength: 3
          maxLength: 255
        notifyGuests:
          type: boolean
          description: |
            If true (default), backend sends cancellation emails / push
            notifications. Hosts can suppress notifications for private events.
          default: true
    # Payment Method schemas
    PaymentMethod:
      type: object
      required: [id, user_id, provider, method_id, is_default]
      properties:
        id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        method_id: { type: string } # Provider payment method ID
        is_default: { type: boolean }
        brand: { type: string } # visa, mastercard, etc.
        last_four: { type: string }
        exp_month: { type: integer }
        exp_year: { type: integer }
        created_at: { type: string, format: date-time }

    PaymentMethodCreate:
      type: object
      required: [provider, method_id]
      properties:
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        method_id: { type: string }
        is_default: { type: boolean, default: false }

    PaymentMethodUpdate:
      type: object
      properties:
        is_default: { type: boolean }

    # Invoice schemas
    Invoice:
      type: object
      required: [id, user_id, amount_cents, currency, status, invoice_date, provider]
      properties:
        id: { type: string, format: uuid }
        subscription_id: { type: string, format: uuid }
        user_id: { type: string, format: uuid }
        invoice_id: { type: string } # Provider invoice ID
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        amount_cents: { type: integer }
        currency: { type: string, example: usd }
        status:
          type: string
          enum: [draft, open, paid, void, uncollectible]
        invoice_date: { type: string, format: date-time }
        paid_date: { type: string, format: date-time }
        created_at: { type: string, format: date-time }

    # Payment schemas
    Payment:
      type: object
      required: [id, invoice_id, amount_cents, currency, status, provider]
      properties:
        id: { type: string, format: uuid }
        invoice_id: { type: string, format: uuid }
        provider_transaction_id: { type: string } # Provider transaction ID
        provider: { type: string, enum: [stripe, paypal, razorpay, square,lemonsqueezy] }
        amount_cents: { type: integer }
        currency: { type: string, example: usd }
        status: { type: string, enum: [pending, succeeded, failed, refunded] }
        paid_at: { type: string, format: date-time }
        created_at: { type: string, format: date-time }

    # Subscription management schemas
    SubscriptionUpdate:
      type: object
      properties:
        cancel_at_period_end: { type: boolean }
        plan_id: { type: string, format: uuid }

    # User Profile Management schemas
    ProfileSetupRequest:
      type: object
      required: [display_name]
      properties:
        display_name:
          type: string
          minLength: 1
          description: User's display name
          example: "John Doe"
        meal_preferences:
          type: array
          items:
            type: string
          description: Array of dietary preferences
          example: ["Vegetarian", "Gluten-Free"]
        city:
          type: string
          description: User's city
          example: "San Francisco"
        latitude:
          type: number
          format: double
          description: Latitude coordinate
          example: 37.7749
        longitude:
          type: number
          format: double
          description: Longitude coordinate
          example: -122.4194
        discoverability_radius_km:
          type: integer
          minimum: 1
          maximum: 200
          default: 25
          description: Discovery radius in kilometers
          example: 25

    ProfileSetupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Profile setup completed successfully"

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User profile ID (same as user_id)
        user_id:
          type: string
          format: uuid
          description: User ID from auth
        display_name:
          type: string
          description: User's display name
        meal_preferences:
          type: array
          items:
            type: string
          description: Array of dietary preferences
        city:
          type: string
          description: User's city
        discoverability_enabled:
          type: boolean
          description: Whether user is discoverable
        discoverability_radius_km:
          type: integer
          description: Discovery radius in kilometers
        geo_precision:
          type: string
          enum: [exact, city]
          description: Location precision level
        setup_completed:
          type: boolean
          description: Whether user has completed initial setup
        created_at:
          type: string
          format: date-time
          description: Profile creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Profile last update timestamp

    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
              path:
                type: array
                items:
                  type: string

  responses:
    UnauthorizedError:
      description: Access token missing or invalid
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    ForbiddenError:
      description: The caller lacks permission
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    NotFoundError: # <-- new
      description: Resource not found
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    ConflictError:
      description: Request conflicts with current resource state
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }

    BadRequestError:
      description: Request conflicts with current resource state
      content:
        application/json:
          schema: { $ref: "#/components/schemas/Error" }
