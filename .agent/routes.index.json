{
  "server": {
    "framework": "express",
    "routes": [
      {
        "method": "OPTIONS",
        "path": "*",
        "file": "apps/server/src/app.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/:provider",
        "file": "apps/server/src/app.ts",
        "handler": "(req, res, next) => {\r\n    if (req.params.provider === 'stripe') {\r\n      req.params.provider = 'lemonsqueezy';\r\n    }\r\n    next();\r\n  }"
      },
      {
        "method": "GET",
        "path": "/events/:eventId",
        "file": "apps/server/src/app.ts",
        "handler": "(req, res) => {\r\n    const { eventId } = req.params as { eventId: string };\r\n    const appDeepLink = `potluck://event/${eventId}`;\r\n    const apiBase = process.env.PUBLIC_BASE_URL || (process.env.API_BASE_URL?.replace(/\\/api\\/(v\\d+)$/, '') || '');\r\n    const canonicalUrl = `${apiBase || ''}/events/${eventId}`;\r\n    const html = `<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <title>Potluck – Event</title>\r\n    <meta property=\"og:title\" content=\"Potluck Event\" />\r\n    <meta property=\"og:description\" content=\"Open this event in the Potluck app\" />\r\n    <meta property=\"og:url\" content=\"${canonicalUrl}\" />\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n    <style>\r\n      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; padding: 0; background:#fafafa; }\r\n      .wrap { max-width: 560px; margin: 48px auto; padding: 24px; background: #fff; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.06); }\r\n      h1 { margin: 0 0 8px; font-size: 20px; }\r\n      p { margin: 0 0 16px; color: #374151; }\r\n      a.btn { display:inline-block; padding: 12px 16px; background:#7b2ff7; color:#fff; border-radius:10px; text-decoration:none; font-weight:800; }\r\n      .muted { color:#6b7280; font-size: 14px; margin-top: 16px; }\r\n      code { background: #f3f4f6; padding: 2px 6px; border-radius: 6px; }\r\n    </style>\r\n    <script>\r\n      (function(){\r\n        var link = '${appDeepLink}';\r\n        var now = Date.now();\r\n        // Try to open the app; if it fails, stay on this page\r\n        var t = setTimeout(function(){ /* no-op fallback */ }, 1200);\r\n        window.location.href = link;\r\n      })();\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div class=\"wrap\">\r\n      <h1>Open in Potluck</h1>\r\n      <p>Tap the button below to open this event in the Potluck app.</p>\r\n      <p><a class=\"btn\" href=\"${appDeepLink}\">Open App</a></p>\r\n      <p class=\"muted\">If the app doesn't open, make sure it's installed and try again. Shareable link: <code>${canonicalUrl}</code></p>\r\n    </div>\r\n  </body>\r\n  </html>`;\r\n    res.set('Content-Type', 'text/html').send(html);\r\n  }"
      },
      {
        "method": "POST",
        "path": "/api/v1/dev-log",
        "file": "apps/server/src/app.ts",
        "handler": "(req, res) => {\r\n    try {\r\n      const { level = 'info', message, context } = (req.body || {}) as { level?: string; message?: string; context?: unknown };\r\n      const stamp = new Date().toISOString();\r\n      // eslint-disable-next-line no-console\r\n      console.log(`[client:${level}] ${stamp} ${message || ''}`, context || '');\r\n      res.json({ ok: true });\r\n    } catch (e) {\r\n      res.status(400).json({ ok: false, error: (e as Error).message });\r\n    }\r\n  }"
      },
      {
        "method": "GET",
        "path": "/health",
        "file": "apps/server/src/app.ts",
        "handler": "(req, res) => {\r\n    res.json({ status: 'ok' });\r\n  }"
      },
      {
        "method": "GET",
        "path": "/health",
        "file": "apps/server/tests/health.spec.ts"
      },
      {
        "method": "POST",
        "path": "/billing/webhook/:provider",
        "file": "packages/payments/tests/webhook.express.spec.ts"
      },
      {
        "method": "POST",
        "path": "/billing/webhook/fake?tenantId=t1",
        "file": "packages/payments/tests/webhook.express.spec.ts"
      },
      {
        "method": "GET",
        "path": "/events/requests/all",
        "file": "apps/mobile/src/services/apiClient.ts"
      },
      {
        "method": "GET",
        "path": "/items/me",
        "file": "apps/mobile/src/services/apiClient.ts"
      },
      {
        "method": "POST",
        "path": "/items/me",
        "file": "apps/mobile/src/services/apiClient.ts",
        "handler": "body"
      },
      {
        "method": "GET",
        "path": "/billing/payment-methods",
        "file": "apps/mobile/src/services/apiClient.ts"
      },
      {
        "method": "POST",
        "path": "/billing/payment-methods",
        "file": "apps/mobile/src/services/apiClient.ts",
        "handler": "payload"
      },
      {
        "method": "GET",
        "path": "/billing/invoices",
        "file": "apps/mobile/src/services/apiClient.ts"
      },
      {
        "method": "GET",
        "path": "/billing/plans",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "GET",
        "path": "/billing/subscriptions",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "GET",
        "path": "/billing/invoices",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "POST",
        "path": "/billing/checkout/subscription",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "GET",
        "path": "/billing/payment-methods",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "POST",
        "path": "/billing/payment-method",
        "file": "apps/mobile/src/services/payment.service.ts"
      },
      {
        "method": "POST",
        "path": "http://localhost:3000/api/v1/payments-dev/seed-subscription",
        "file": "apps/mobile/tests/ui/subscription.spec.ts"
      },
      {
        "method": "GET",
        "path": "http://localhost:3000/api/v1/billing/subscriptions",
        "file": "apps/mobile/tests/ui/subscription.spec.ts"
      },
      {
        "method": "POST",
        "path": "/signup",
        "file": "apps/server/src/routes/auth.routes.ts",
        "handler": "signup"
      },
      {
        "method": "POST",
        "path": "/login",
        "file": "apps/server/src/routes/auth.routes.ts",
        "handler": "login"
      },
      {
        "method": "POST",
        "path": "/logout",
        "file": "apps/server/src/routes/auth.routes.ts",
        "handler": "logout"
      },
      {
        "method": "GET",
        "path": "/plans",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "BillingController.listPlans"
      },
      {
        "method": "POST",
        "path": "/checkout/subscription",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/subscriptions",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/subscriptions/:subscriptionId/reactivate",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/payment-methods",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/payment-methods",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/payment-methods/:methodId/set-default",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices/:invoiceId",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices/:invoiceId/download",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/webhook/:provider",
        "file": "apps/server/src/routes/billing.routes.ts",
        "handler": "(req, res, next) => {\r\n  if (req.params.provider === 'stripe') {\r\n    req.params.provider = 'lemonsqueezy';\r\n  }\r\n  next();\r\n}"
      },
      {
        "method": "GET",
        "path": "/events/nearby",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/city",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/popular",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/:eventId/location",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/notifications",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/notifications/:notificationId/read",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/notifications/read-all",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/notifications/unread-count",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/push/register",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me/notification-preferences",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/me/notification-preferences",
        "file": "apps/server/src/routes/discovery.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/publish",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/cancel",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/complete",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/purge",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/restore",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/rebalance",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/requests/all",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/:eventId/availability",
        "file": "apps/server/src/routes/events.routes.ts",
        "handler": "R.RequestsController.getEventAvailability"
      },
      {
        "method": "GET",
        "path": "/catalog",
        "file": "apps/server/src/routes/items.library.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me",
        "file": "apps/server/src/routes/items.library.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/me",
        "file": "apps/server/src/routes/items.library.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/me/:id",
        "file": "apps/server/src/routes/items.library.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/me/:id",
        "file": "apps/server/src/routes/items.library.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:itemId/assign",
        "file": "apps/server/src/routes/items.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/:itemId/assign",
        "file": "apps/server/src/routes/items.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/mock-checkout",
        "file": "apps/server/src/routes/mock.routes.ts",
        "handler": "(req: Request, res: Response) => {\r\n  const { plan, user, email, name, test_mode, no_products } = req.query;\r\n  const isTestMode = test_mode === 'true';\r\n  const hasNoProducts = no_products === 'true';\r\n  \r\n  const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>${isTestMode ? 'LemonSqueezy Test Mode' : 'Potluck - Mock Checkout'}</title>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n        \r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 20px;\r\n        }\r\n        \r\n        .checkout-container {\r\n            background: white;\r\n            border-radius: 20px;\r\n            padding: 40px;\r\n            max-width: 500px;\r\n            width: 100%;\r\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n        }\r\n        \r\n        .logo {\r\n            font-size: 32px;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n            margin-bottom: 20px;\r\n        }\r\n        \r\n        .title {\r\n            font-size: 24px;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .subtitle {\r\n            color: #666;\r\n            margin-bottom: 30px;\r\n        }\r\n        \r\n        .plan-info {\r\n            background: #f8f9fa;\r\n            border-radius: 12px;\r\n            padding: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        \r\n        .plan-name {\r\n            font-size: 20px;\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .plan-price {\r\n            font-size: 32px;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .user-info {\r\n            background: #e3f2fd;\r\n            border-radius: 12px;\r\n            padding: 15px;\r\n            margin-bottom: 30px;\r\n            text-align: left;\r\n        }\r\n        \r\n        .info-row {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 8px;\r\n        }\r\n        \r\n        .info-label {\r\n            color: #666;\r\n            font-weight: 500;\r\n        }\r\n        \r\n        .info-value {\r\n            color: #333;\r\n            font-weight: 600;\r\n        }\r\n        \r\n        .buttons {\r\n            display: flex;\r\n            gap: 15px;\r\n            justify-content: center;\r\n        }\r\n        \r\n        .btn {\r\n            padding: 15px 30px;\r\n            border: none;\r\n            border-radius: 12px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.3s ease;\r\n            text-decoration: none;\r\n            display: inline-block;\r\n        }\r\n        \r\n        .btn-primary {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n        }\r\n        \r\n        .btn-primary:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\r\n        }\r\n        \r\n        .btn-secondary {\r\n            background: #f8f9fa;\r\n            color: #666;\r\n            border: 2px solid #e9ecef;\r\n        }\r\n        \r\n        .btn-secondary:hover {\r\n            background: #e9ecef;\r\n        }\r\n        \r\n        .test-mode {\r\n            background: #fff3cd;\r\n            border: 1px solid #ffeaa7;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 20px;\r\n            color: #856404;\r\n        }\r\n        \r\n        .test-mode strong {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"checkout-container\">\r\n        <div class=\"logo\">🍲 Potluck</div>\r\n        <h1 class=\"title\">${hasNoProducts ? 'LemonSqueezy Setup Required' : (isTestMode ? 'LemonSqueezy Test Mode' : 'Mock Checkout')}</h1>\r\n        <p class=\"subtitle\">${hasNoProducts ? 'Store configured but no products found' : (isTestMode ? 'API connection successful, but no store configured' : 'This is a test checkout page for development')}</p>\r\n        \r\n        <div class=\"test-mode\">\r\n            <strong>${hasNoProducts ? '⚠️ No Products Found' : (isTestMode ? '🧪 API Test Mode' : '🧪 Test Mode')}</strong>\r\n            ${hasNoProducts ? \r\n              'Your LemonSqueezy store is configured, but no products are available. You need to create products and variants in your LemonSqueezy dashboard.' : \r\n              (isTestMode ? \r\n                'Your LemonSqueezy API key is working, but no store is configured. This is a local mock checkout for testing the integration flow.' : \r\n                'This is a mock checkout page. In production, this would be handled by LemonSqueezy.'\r\n              )\r\n            }\r\n        </div>\r\n        \r\n        <div class=\"plan-info\">\r\n            <div class=\"plan-name\">${plan || 'Pro Plan'}</div>\r\n            <div class=\"plan-price\">$29.99/month</div>\r\n            <p>Unlimited events, advanced features, and more!</p>\r\n        </div>\r\n        \r\n        <div class=\"user-info\">\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">User ID:</span>\r\n                <span class=\"info-value\">${user || 'N/A'}</span>\r\n            </div>\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">Email:</span>\r\n                <span class=\"info-value\">${email || 'N/A'}</span>\r\n            </div>\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">Name:</span>\r\n                <span class=\"info-value\">${name || 'N/A'}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        ${hasNoProducts ? `\r\n        <div class=\"test-mode\" style=\"margin-top: 20px; text-align: left;\">\r\n            <strong>🚀 Next Steps to Enable Real Checkouts:</strong>\r\n            <ol style=\"margin: 10px 0; padding-left: 20px;\">\r\n                <li>Go to your <a href=\"https://lemonsqueezy.com\" target=\"_blank\" style=\"color: #667eea;\">LemonSqueezy dashboard</a></li>\r\n                <li>Navigate to your store (ID: ${user || 'N/A'})</li>\r\n                <li>Click \"Products\" and create a new product</li>\r\n                <li>Add variants for each plan (Pro, Basic, etc.)</li>\r\n                <li>Copy the variant IDs and update your database</li>\r\n                <li>Test the checkout flow again</li>\r\n            </ol>\r\n            <p style=\"margin: 10px 0 0 0; font-size: 14px;\"><strong>See:</strong> <code>apps/server/LEMONSQUEEZY_TEST_SETUP.md</code> for detailed instructions</p>\r\n        </div>\r\n        ` : (isTestMode ? `\r\n        <div class=\"test-mode\" style=\"margin-top: 20px; text-align: left;\">\r\n            <strong>🚀 Next Steps to Enable Real Checkouts:</strong>\r\n            <ol style=\"margin: 10px 0; padding-left: 20px;\">\r\n                <li>Go to <a href=\"https://lemonsqueezy.com\" target=\"_blank\" style=\"color: #667eea;\">lemonsqueezy.com</a> and create an account</li>\r\n                <li>Create a test store in your LemonSqueezy dashboard</li>\r\n                <li>Create products with variants for your plans</li>\r\n                <li>Set <code>LEMONSQUEEZY_STORE_ID</code> in your .env file</li>\r\n                <li>Restart your server and test again</li>\r\n            </ol>\r\n            <p style=\"margin: 10px 0 0 0; font-size: 14px;\"><strong>See:</strong> <code>apps/server/LEMONSQUEEZY_TEST_SETUP.md</code> for detailed instructions</p>\r\n        </div>\r\n        ` : '')}\r\n        \r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-primary\" onclick=\"simulateSuccess()\">\r\n                ✅ Complete Payment (Mock)\r\n            </button>\r\n            <button class=\"btn btn-secondary\" onclick=\"goBack()\">\r\n                ← Go Back\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n    <script>\r\n        function simulateSuccess() {\r\n            // Simulate successful payment\r\n            alert('🎉 Payment successful! (This is a mock)');\r\n            \r\n            // In a real app, you would redirect back to your app\r\n            // For now, we'll just show a success message\r\n            document.body.innerHTML = \\`\r\n                <div class=\"checkout-container\">\r\n                    <div class=\"logo\">🍲 Potluck</div>\r\n                    <h1 class=\"title\">Payment Successful!</h1>\r\n                    <p class=\"subtitle\">Your subscription has been activated</p>\r\n                    <div class=\"plan-info\">\r\n                        <div class=\"plan-name\">${plan || 'Pro Plan'}</div>\r\n                        <div class=\"plan-price\">$29.99/month</div>\r\n                        <p>Welcome to Potluck Pro! 🎉</p>\r\n                    </div>\r\n                    <button class=\"btn btn-primary\" onclick=\"goBack()\">\r\n                        Return to App\r\n                    </button>\r\n                </div>\r\n            \\`;\r\n        }\r\n        \r\n        function goBack() {\r\n            // Close the window/tab\r\n            window.close();\r\n            \r\n            // If window.close() doesn't work, try to go back\r\n            if (window.history.length > 1) {\r\n                window.history.back();\r\n            } else {\r\n                // Fallback: redirect to a success page\r\n                window.location.href = '/success';\r\n            }\r\n        }\r\n        \r\n        // Auto-focus on the payment button for better UX\r\n        window.onload = function() {\r\n            const paymentBtn = document.querySelector('.btn-primary');\r\n            if (paymentBtn) {\r\n                paymentBtn.focus();\r\n            }\r\n        };\r\n    </script>\r\n</body>\r\n</html>\r\n  `;\r\n  \r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(html);\r\n}"
      },
      {
        "method": "GET",
        "path": "/success",
        "file": "apps/server/src/routes/mock.routes.ts",
        "handler": "(req: Request, res: Response) => {\r\n  const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Payment Successful - Potluck</title>\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 20px;\r\n        }\r\n        .success-container {\r\n            background: white;\r\n            border-radius: 20px;\r\n            padding: 40px;\r\n            max-width: 400px;\r\n            width: 100%;\r\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n        }\r\n        .success-icon {\r\n            font-size: 64px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .title {\r\n            font-size: 24px;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        .subtitle {\r\n            color: #666;\r\n            margin-bottom: 30px;\r\n        }\r\n        .btn {\r\n            padding: 15px 30px;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n            border: none;\r\n            border-radius: 12px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            text-decoration: none;\r\n            display: inline-block;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"success-container\">\r\n        <div class=\"success-icon\">✅</div>\r\n        <h1 class=\"title\">Payment Successful!</h1>\r\n        <p class=\"subtitle\">Your subscription has been activated. You can now close this window and return to the app.</p>\r\n        <button class=\"btn\" onclick=\"window.close()\">Close Window</button>\r\n    </div>\r\n</body>\r\n</html>\r\n  `;\r\n  \r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(html);\r\n}"
      },
      {
        "method": "POST",
        "path": "/",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/:partId",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/:partId",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/:partId",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:partId/resend",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:partId/transfer",
        "file": "apps/server/src/routes/participants.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me/location",
        "file": "apps/server/src/routes/user-location.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/me/location",
        "file": "apps/server/src/routes/user-location.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/me/discoverability",
        "file": "apps/server/src/routes/user-location.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/me/location",
        "file": "apps/server/src/routes/user-location.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/cities/search",
        "file": "apps/server/src/routes/user-location.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/setup",
        "file": "apps/server/src/routes/user-profile.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me",
        "file": "apps/server/src/routes/user-profile.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/phone/send",
        "file": "apps/server/src/routes/user-profile.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/phone/verify",
        "file": "apps/server/src/routes/user-profile.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/events/create.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/events/lifecycle.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/events/rls.spec.ts"
      },
      {
        "method": "POST",
        "path": "/events",
        "file": "apps/server/tests/events/validation.spec.ts"
      },
      {
        "method": "GET",
        "path": "/events/not-a-uuid",
        "file": "apps/server/tests/events/validation.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/auth-smoke.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/auth-smoke.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/logout",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/logout",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/logout",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/logout",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/signup",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/auth/login",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/auth.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/payment-methods",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/invoices",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/invoices",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/invoices",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/lemonsqueezy",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing-comprehensive.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/plans",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/checkout/subscription",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/billing/subscriptions",
        "file": "apps/server/tests/integration/billing.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events?limit=1&offset=0",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events?limit=10&offset=0&status=published&ownership=all",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events?status=cancelled",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/events.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/discovery/notifications",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/discovery/notifications",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/discovery/notifications",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/location-discovery.spec.ts"
      },
      {
        "method": "POST",
        "path": "/billing/checkout/subscription",
        "file": "apps/server/tests/integration/payments.e2e.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/requests-advanced.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/requests.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events/00000000-0000-0000-0000-000000000000/availability",
        "file": "apps/server/tests/integration/requests.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "GET",
        "path": "/api/v1/events",
        "file": "apps/server/tests/integration/user-event-workflow-demo.spec.ts"
      },
      {
        "method": "GET",
        "path": "/webhook-status",
        "file": "packages/payments/src/web/dev.ts",
        "handler": "(_req: Request, res: Response) => {\r\n    res.json({\r\n      status: 'active',\r\n      endpointHint: '/billing/webhook/:provider',\r\n      providers: 'use ProviderConfigStore for enabled providers',\r\n      timestamp: new Date().toISOString(),\r\n    });\r\n  }"
      },
      {
        "method": "POST",
        "path": "/seed-subscription",
        "file": "packages/payments/src/web/dev.ts",
        "handler": "async (req: Request, res: Response) => {\r\n    try {\r\n      const fromOpt = opts?.getUserId?.(req);\r\n      const fromBody = (req.body?.user_id as string | undefined);\r\n      const fromHeader = (Array.isArray(req.headers['x-dev-user-id']) ? req.headers['x-dev-user-id'][0] : (req.headers['x-dev-user-id'] as string | undefined));\r\n      const userId = fromOpt || fromBody || fromHeader;\r\n      const userEmail = opts?.getUserEmail?.(req);\r\n      if (!userId) return res.status(401).json({ ok: false, error: 'Unauthorized: user_id missing' });\r\n\r\n      const provider = (req.body?.provider as string) || 'lemonsqueezy';\r\n      let planId = (req.body?.plan_id as string) || 'test-default-plan';\r\n      // Coerce non-UUID plan ids (e.g., provider variant ids like '992415') to a UUID to satisfy DB schemas\r\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n      if (!uuidRegex.test(planId)) {\r\n        const coerced = randomUUID();\r\n        planId = coerced;\r\n        container.logger.info?.('dev.seeding.coercePlanId', { original: req.body?.plan_id, coerced });\r\n      }\r\n      const providerSubId = (req.body?.provider_subscription_id as string) || randomUUID();\r\n      const status = (req.body?.status as Subscription['status']) || 'active';\r\n\r\n      // Ensure plan exists (satisfy potential FK)\r\n      const plan: Plan = {\r\n        id: planId,\r\n        name: (req.body?.plan_name as string) || 'Seeded Plan',\r\n        amountCents: Number(req.body?.amount_cents ?? 0),\r\n        currency: (req.body?.currency as string) || 'usd',\r\n        interval: (req.body?.interval as any) || 'month',\r\n        isActive: true,\r\n      } as any;\r\n      try { await container.persistence.upsertPlan(plan); } catch {}\r\n\r\n      const sub: Subscription = {\r\n        id: randomUUID(),\r\n        provider,\r\n        providerSubId,\r\n        planId,\r\n        userId,\r\n        status,\r\n        currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\r\n      };\r\n\r\n      await container.persistence.upsertSubscription(sub);\r\n      await container.events.publish('dev.subscription.seeded', { sub, userEmail });\r\n\r\n      return res.json({ ok: true, data: sub });\r\n    } catch (e) {\r\n      container.logger.error('dev seed-subscription failed', { error: e });\r\n      return res.status(500).json({ ok: false, error: e instanceof Error ? e.message : 'Unknown error' });\r\n    }\r\n  }"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/components/joinRequests/RequestToJoinButton.tsx"
      },
      {
        "method": "GET",
        "path": "window",
        "file": "apps/mobile/src/components/ui/FilterBottomSheet.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/CreateEvent.tsx"
      },
      {
        "method": "POST",
        "path": "/events",
        "file": "apps/mobile/src/screens/Auth/CreateEvent.tsx",
        "handler": "payload"
      },
      {
        "method": "GET",
        "path": "window",
        "file": "apps/mobile/src/screens/Auth/EditProfileScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/EditProfileScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/user-profile/phone/send",
        "file": "apps/mobile/src/screens/Auth/EditProfileScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/user-profile/phone/verify",
        "file": "apps/mobile/src/screens/Auth/EditProfileScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/user-profile/phone/send",
        "file": "apps/mobile/src/screens/Auth/EditProfileScreen.tsx"
      },
      {
        "method": "GET",
        "path": "content-length",
        "file": "apps/mobile/src/screens/Auth/EventDetailsPage.tsx"
      },
      {
        "method": "GET",
        "path": "content-type",
        "file": "apps/mobile/src/screens/Auth/EventDetailsPage.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/EventList.tsx"
      },
      {
        "method": "GET",
        "path": "/discovery/notifications/unread-count",
        "file": "apps/mobile/src/screens/Auth/EventList.tsx"
      },
      {
        "method": "POST",
        "path": "/discovery/push/register",
        "file": "apps/mobile/src/screens/Auth/EventList.tsx"
      },
      {
        "method": "GET",
        "path": "window",
        "file": "apps/mobile/src/screens/Auth/MyItemsScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/events/requests/all",
        "file": "apps/mobile/src/screens/Auth/MyJoinRequestsScreen.tsx"
      },
      {
        "method": "PATCH",
        "path": "/discovery/notifications/read-all",
        "file": "apps/mobile/src/screens/Auth/NotificationsScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-location/me/location",
        "file": "apps/mobile/src/screens/Auth/ProfileSetupScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/user-profile/setup",
        "file": "apps/mobile/src/screens/Auth/ProfileSetupScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/SettingsScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/SupabaseAuthUI.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/SupabaseAuthUI.tsx"
      },
      {
        "method": "GET",
        "path": "window",
        "file": "apps/mobile/src/screens/Auth/UserPreferencesScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-location/me/location",
        "file": "apps/mobile/src/screens/Auth/UserPreferencesScreen.tsx"
      },
      {
        "method": "GET",
        "path": "/user-profile/me",
        "file": "apps/mobile/src/screens/Auth/UserPreferencesScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/user-profile/setup",
        "file": "apps/mobile/src/screens/Auth/UserPreferencesScreen.tsx",
        "handler": "payload"
      },
      {
        "method": "GET",
        "path": "window",
        "file": "apps/mobile/src/screens/Auth/UserProfileScreen.tsx"
      },
      {
        "method": "POST",
        "path": "/",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/approve",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/decline",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/waitlist",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/cancel",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:requestId/extend",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/reorder",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/promote",
        "file": "apps/server/src/modules/requests/requests.routes.ts",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/api/v1/user-profile/me",
        "file": "apps/server/tests/rest/cases/phone-verification.mjs"
      },
      {
        "method": "POST",
        "path": "/api/v1/user-profile/phone/send",
        "file": "apps/server/tests/rest/cases/phone-verification.mjs"
      },
      {
        "method": "POST",
        "path": "/api/v1/events",
        "file": "apps/server/tests/rest/cases/phone-verification.mjs"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "POST",
        "path": "/v1/checkouts",
        "file": "apps/server/tests/unit/services/payment-providers.service.spec.ts"
      },
      {
        "method": "OPTIONS",
        "path": "*",
        "file": "apps/server/dist/apps/server/src/app.js"
      },
      {
        "method": "POST",
        "path": "/api/v1/billing/webhook/:provider",
        "file": "apps/server/dist/apps/server/src/app.js",
        "handler": "(req, res, next) => {\n        if (req.params.provider === 'stripe') {\n            req.params.provider = 'lemonsqueezy';\n        }\n        next();\n    }"
      },
      {
        "method": "GET",
        "path": "/events/:eventId",
        "file": "apps/server/dist/apps/server/src/app.js",
        "handler": "(req, res) => {\n        const { eventId } = req.params;\n        const appDeepLink = `potluck://event/${eventId}`;\n        const apiBase = process.env.PUBLIC_BASE_URL || (process.env.API_BASE_URL?.replace(/\\/api\\/(v\\d+)$/, '') || '');\n        const canonicalUrl = `${apiBase || ''}/events/${eventId}`;\n        const html = `<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n    <title>Potluck – Event</title>\r\n    <meta property=\"og:title\" content=\"Potluck Event\" />\r\n    <meta property=\"og:description\" content=\"Open this event in the Potluck app\" />\r\n    <meta property=\"og:url\" content=\"${canonicalUrl}\" />\r\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n    <style>\r\n      body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; padding: 0; background:#fafafa; }\r\n      .wrap { max-width: 560px; margin: 48px auto; padding: 24px; background: #fff; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.06); }\r\n      h1 { margin: 0 0 8px; font-size: 20px; }\r\n      p { margin: 0 0 16px; color: #374151; }\r\n      a.btn { display:inline-block; padding: 12px 16px; background:#7b2ff7; color:#fff; border-radius:10px; text-decoration:none; font-weight:800; }\r\n      .muted { color:#6b7280; font-size: 14px; margin-top: 16px; }\r\n      code { background: #f3f4f6; padding: 2px 6px; border-radius: 6px; }\r\n    </style>\r\n    <script>\r\n      (function(){\r\n        var link = '${appDeepLink}';\r\n        var now = Date.now();\r\n        // Try to open the app; if it fails, stay on this page\r\n        var t = setTimeout(function(){ /* no-op fallback */ }, 1200);\r\n        window.location.href = link;\r\n      })();\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <div class=\"wrap\">\r\n      <h1>Open in Potluck</h1>\r\n      <p>Tap the button below to open this event in the Potluck app.</p>\r\n      <p><a class=\"btn\" href=\"${appDeepLink}\">Open App</a></p>\r\n      <p class=\"muted\">If the app doesn't open, make sure it's installed and try again. Shareable link: <code>${canonicalUrl}</code></p>\r\n    </div>\r\n  </body>\r\n  </html>`;\n        res.set('Content-Type', 'text/html').send(html);\n    }"
      },
      {
        "method": "POST",
        "path": "/api/v1/dev-log",
        "file": "apps/server/dist/apps/server/src/app.js",
        "handler": "(req, res) => {\n        try {\n            const { level = 'info', message, context } = (req.body || {});\n            const stamp = new Date().toISOString();\n            // eslint-disable-next-line no-console\n            console.log(`[client:${level}] ${stamp} ${message || ''}`, context || '');\n            res.json({ ok: true });\n        }\n        catch (e) {\n            res.status(400).json({ ok: false, error: e.message });\n        }\n    }"
      },
      {
        "method": "GET",
        "path": "/health",
        "file": "apps/server/dist/apps/server/src/app.js",
        "handler": "(req, res) => {\n        res.json({ status: 'ok' });\n    }"
      },
      {
        "method": "POST",
        "path": "/signup",
        "file": "apps/server/dist/apps/server/src/routes/auth.routes.js",
        "handler": "signup"
      },
      {
        "method": "POST",
        "path": "/login",
        "file": "apps/server/dist/apps/server/src/routes/auth.routes.js",
        "handler": "login"
      },
      {
        "method": "POST",
        "path": "/logout",
        "file": "apps/server/dist/apps/server/src/routes/auth.routes.js",
        "handler": "logout"
      },
      {
        "method": "GET",
        "path": "/plans",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "BillingController.listPlans"
      },
      {
        "method": "POST",
        "path": "/checkout/subscription",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/subscriptions",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/subscriptions/:subscriptionId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/subscriptions/:subscriptionId/reactivate",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/payment-methods",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/payment-methods",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/payment-methods/:methodId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/payment-methods/:methodId/set-default",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices/:invoiceId",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/invoices/:invoiceId/download",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/webhook/:provider",
        "file": "apps/server/dist/apps/server/src/routes/billing.routes.js",
        "handler": "(req, res, next) => {\n    if (req.params.provider === 'stripe') {\n        req.params.provider = 'lemonsqueezy';\n    }\n    next();\n}"
      },
      {
        "method": "GET",
        "path": "/events/nearby",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/city",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/popular",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/events/:eventId/location",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/notifications",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/notifications/:notificationId/read",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/notifications/read-all",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/notifications/unread-count",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/push/register",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me/notification-preferences",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/me/notification-preferences",
        "file": "apps/server/dist/apps/server/src/routes/discovery.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/publish",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/cancel",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/complete",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/purge",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/restore",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:eventId/rebalance",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/requests/all",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/:eventId/availability",
        "file": "apps/server/dist/apps/server/src/routes/events.routes.js",
        "handler": "R.RequestsController.getEventAvailability"
      },
      {
        "method": "GET",
        "path": "/catalog",
        "file": "apps/server/dist/apps/server/src/routes/items.library.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me",
        "file": "apps/server/dist/apps/server/src/routes/items.library.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/me",
        "file": "apps/server/dist/apps/server/src/routes/items.library.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/me/:id",
        "file": "apps/server/dist/apps/server/src/routes/items.library.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/me/:id",
        "file": "apps/server/dist/apps/server/src/routes/items.library.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:itemId/assign",
        "file": "apps/server/dist/apps/server/src/routes/items.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/:itemId/assign",
        "file": "apps/server/dist/apps/server/src/routes/items.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/",
        "file": "apps/server/dist/apps/server/src/routes/locations.routes.js",
        "handler": "addLocation"
      },
      {
        "method": "GET",
        "path": "/mock-checkout",
        "file": "apps/server/dist/apps/server/src/routes/mock.routes.js",
        "handler": "(req, res) => {\n    const { plan, user, email, name, test_mode, no_products } = req.query;\n    const isTestMode = test_mode === 'true';\n    const hasNoProducts = no_products === 'true';\n    const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>${isTestMode ? 'LemonSqueezy Test Mode' : 'Potluck - Mock Checkout'}</title>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n        \r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 20px;\r\n        }\r\n        \r\n        .checkout-container {\r\n            background: white;\r\n            border-radius: 20px;\r\n            padding: 40px;\r\n            max-width: 500px;\r\n            width: 100%;\r\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n        }\r\n        \r\n        .logo {\r\n            font-size: 32px;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n            margin-bottom: 20px;\r\n        }\r\n        \r\n        .title {\r\n            font-size: 24px;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .subtitle {\r\n            color: #666;\r\n            margin-bottom: 30px;\r\n        }\r\n        \r\n        .plan-info {\r\n            background: #f8f9fa;\r\n            border-radius: 12px;\r\n            padding: 20px;\r\n            margin-bottom: 30px;\r\n        }\r\n        \r\n        .plan-name {\r\n            font-size: 20px;\r\n            font-weight: bold;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .plan-price {\r\n            font-size: 32px;\r\n            font-weight: bold;\r\n            color: #667eea;\r\n            margin-bottom: 10px;\r\n        }\r\n        \r\n        .user-info {\r\n            background: #e3f2fd;\r\n            border-radius: 12px;\r\n            padding: 15px;\r\n            margin-bottom: 30px;\r\n            text-align: left;\r\n        }\r\n        \r\n        .info-row {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 8px;\r\n        }\r\n        \r\n        .info-label {\r\n            color: #666;\r\n            font-weight: 500;\r\n        }\r\n        \r\n        .info-value {\r\n            color: #333;\r\n            font-weight: 600;\r\n        }\r\n        \r\n        .buttons {\r\n            display: flex;\r\n            gap: 15px;\r\n            justify-content: center;\r\n        }\r\n        \r\n        .btn {\r\n            padding: 15px 30px;\r\n            border: none;\r\n            border-radius: 12px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            transition: all 0.3s ease;\r\n            text-decoration: none;\r\n            display: inline-block;\r\n        }\r\n        \r\n        .btn-primary {\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n        }\r\n        \r\n        .btn-primary:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);\r\n        }\r\n        \r\n        .btn-secondary {\r\n            background: #f8f9fa;\r\n            color: #666;\r\n            border: 2px solid #e9ecef;\r\n        }\r\n        \r\n        .btn-secondary:hover {\r\n            background: #e9ecef;\r\n        }\r\n        \r\n        .test-mode {\r\n            background: #fff3cd;\r\n            border: 1px solid #ffeaa7;\r\n            border-radius: 8px;\r\n            padding: 15px;\r\n            margin-bottom: 20px;\r\n            color: #856404;\r\n        }\r\n        \r\n        .test-mode strong {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"checkout-container\">\r\n        <div class=\"logo\">🍲 Potluck</div>\r\n        <h1 class=\"title\">${hasNoProducts ? 'LemonSqueezy Setup Required' : (isTestMode ? 'LemonSqueezy Test Mode' : 'Mock Checkout')}</h1>\r\n        <p class=\"subtitle\">${hasNoProducts ? 'Store configured but no products found' : (isTestMode ? 'API connection successful, but no store configured' : 'This is a test checkout page for development')}</p>\r\n        \r\n        <div class=\"test-mode\">\r\n            <strong>${hasNoProducts ? '⚠️ No Products Found' : (isTestMode ? '🧪 API Test Mode' : '🧪 Test Mode')}</strong>\r\n            ${hasNoProducts ?\n        'Your LemonSqueezy store is configured, but no products are available. You need to create products and variants in your LemonSqueezy dashboard.' :\n        (isTestMode ?\n            'Your LemonSqueezy API key is working, but no store is configured. This is a local mock checkout for testing the integration flow.' :\n            'This is a mock checkout page. In production, this would be handled by LemonSqueezy.')}\r\n        </div>\r\n        \r\n        <div class=\"plan-info\">\r\n            <div class=\"plan-name\">${plan || 'Pro Plan'}</div>\r\n            <div class=\"plan-price\">$29.99/month</div>\r\n            <p>Unlimited events, advanced features, and more!</p>\r\n        </div>\r\n        \r\n        <div class=\"user-info\">\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">User ID:</span>\r\n                <span class=\"info-value\">${user || 'N/A'}</span>\r\n            </div>\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">Email:</span>\r\n                <span class=\"info-value\">${email || 'N/A'}</span>\r\n            </div>\r\n            <div class=\"info-row\">\r\n                <span class=\"info-label\">Name:</span>\r\n                <span class=\"info-value\">${name || 'N/A'}</span>\r\n            </div>\r\n        </div>\r\n        \r\n        ${hasNoProducts ? `\r\n        <div class=\"test-mode\" style=\"margin-top: 20px; text-align: left;\">\r\n            <strong>🚀 Next Steps to Enable Real Checkouts:</strong>\r\n            <ol style=\"margin: 10px 0; padding-left: 20px;\">\r\n                <li>Go to your <a href=\"https://lemonsqueezy.com\" target=\"_blank\" style=\"color: #667eea;\">LemonSqueezy dashboard</a></li>\r\n                <li>Navigate to your store (ID: ${user || 'N/A'})</li>\r\n                <li>Click \"Products\" and create a new product</li>\r\n                <li>Add variants for each plan (Pro, Basic, etc.)</li>\r\n                <li>Copy the variant IDs and update your database</li>\r\n                <li>Test the checkout flow again</li>\r\n            </ol>\r\n            <p style=\"margin: 10px 0 0 0; font-size: 14px;\"><strong>See:</strong> <code>apps/server/LEMONSQUEEZY_TEST_SETUP.md</code> for detailed instructions</p>\r\n        </div>\r\n        ` : (isTestMode ? `\r\n        <div class=\"test-mode\" style=\"margin-top: 20px; text-align: left;\">\r\n            <strong>🚀 Next Steps to Enable Real Checkouts:</strong>\r\n            <ol style=\"margin: 10px 0; padding-left: 20px;\">\r\n                <li>Go to <a href=\"https://lemonsqueezy.com\" target=\"_blank\" style=\"color: #667eea;\">lemonsqueezy.com</a> and create an account</li>\r\n                <li>Create a test store in your LemonSqueezy dashboard</li>\r\n                <li>Create products with variants for your plans</li>\r\n                <li>Set <code>LEMONSQUEEZY_STORE_ID</code> in your .env file</li>\r\n                <li>Restart your server and test again</li>\r\n            </ol>\r\n            <p style=\"margin: 10px 0 0 0; font-size: 14px;\"><strong>See:</strong> <code>apps/server/LEMONSQUEEZY_TEST_SETUP.md</code> for detailed instructions</p>\r\n        </div>\r\n        ` : '')}\r\n        \r\n        <div class=\"buttons\">\r\n            <button class=\"btn btn-primary\" onclick=\"simulateSuccess()\">\r\n                ✅ Complete Payment (Mock)\r\n            </button>\r\n            <button class=\"btn btn-secondary\" onclick=\"goBack()\">\r\n                ← Go Back\r\n            </button>\r\n        </div>\r\n    </div>\r\n    \r\n    <script>\r\n        function simulateSuccess() {\r\n            // Simulate successful payment\r\n            alert('🎉 Payment successful! (This is a mock)');\r\n            \r\n            // In a real app, you would redirect back to your app\r\n            // For now, we'll just show a success message\r\n            document.body.innerHTML = \\`\r\n                <div class=\"checkout-container\">\r\n                    <div class=\"logo\">🍲 Potluck</div>\r\n                    <h1 class=\"title\">Payment Successful!</h1>\r\n                    <p class=\"subtitle\">Your subscription has been activated</p>\r\n                    <div class=\"plan-info\">\r\n                        <div class=\"plan-name\">${plan || 'Pro Plan'}</div>\r\n                        <div class=\"plan-price\">$29.99/month</div>\r\n                        <p>Welcome to Potluck Pro! 🎉</p>\r\n                    </div>\r\n                    <button class=\"btn btn-primary\" onclick=\"goBack()\">\r\n                        Return to App\r\n                    </button>\r\n                </div>\r\n            \\`;\r\n        }\r\n        \r\n        function goBack() {\r\n            // Close the window/tab\r\n            window.close();\r\n            \r\n            // If window.close() doesn't work, try to go back\r\n            if (window.history.length > 1) {\r\n                window.history.back();\r\n            } else {\r\n                // Fallback: redirect to a success page\r\n                window.location.href = '/success';\r\n            }\r\n        }\r\n        \r\n        // Auto-focus on the payment button for better UX\r\n        window.onload = function() {\r\n            const paymentBtn = document.querySelector('.btn-primary');\r\n            if (paymentBtn) {\r\n                paymentBtn.focus();\r\n            }\r\n        };\r\n    </script>\r\n</body>\r\n</html>\r\n  `;\n    res.setHeader('Content-Type', 'text/html');\n    res.send(html);\n}"
      },
      {
        "method": "GET",
        "path": "/success",
        "file": "apps/server/dist/apps/server/src/routes/mock.routes.js",
        "handler": "(req, res) => {\n    const html = `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Payment Successful - Potluck</title>\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 20px;\r\n        }\r\n        .success-container {\r\n            background: white;\r\n            border-radius: 20px;\r\n            padding: 40px;\r\n            max-width: 400px;\r\n            width: 100%;\r\n            box-shadow: 0 20px 40px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n        }\r\n        .success-icon {\r\n            font-size: 64px;\r\n            margin-bottom: 20px;\r\n        }\r\n        .title {\r\n            font-size: 24px;\r\n            color: #333;\r\n            margin-bottom: 10px;\r\n        }\r\n        .subtitle {\r\n            color: #666;\r\n            margin-bottom: 30px;\r\n        }\r\n        .btn {\r\n            padding: 15px 30px;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n            border: none;\r\n            border-radius: 12px;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            cursor: pointer;\r\n            text-decoration: none;\r\n            display: inline-block;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"success-container\">\r\n        <div class=\"success-icon\">✅</div>\r\n        <h1 class=\"title\">Payment Successful!</h1>\r\n        <p class=\"subtitle\">Your subscription has been activated. You can now close this window and return to the app.</p>\r\n        <button class=\"btn\" onclick=\"window.close()\">Close Window</button>\r\n    </div>\r\n</body>\r\n</html>\r\n  `;\n    res.setHeader('Content-Type', 'text/html');\n    res.send(html);\n}"
      },
      {
        "method": "POST",
        "path": "/",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/:partId",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PUT",
        "path": "/:partId",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/:partId",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/bulk",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:partId/resend",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:partId/transfer",
        "file": "apps/server/dist/apps/server/src/routes/participants.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me/location",
        "file": "apps/server/dist/apps/server/src/routes/user-location.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/me/location",
        "file": "apps/server/dist/apps/server/src/routes/user-location.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/me/discoverability",
        "file": "apps/server/dist/apps/server/src/routes/user-location.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "DELETE",
        "path": "/me/location",
        "file": "apps/server/dist/apps/server/src/routes/user-location.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/cities/search",
        "file": "apps/server/dist/apps/server/src/routes/user-location.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/setup",
        "file": "apps/server/dist/apps/server/src/routes/user-profile.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/me",
        "file": "apps/server/dist/apps/server/src/routes/user-profile.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/phone/send",
        "file": "apps/server/dist/apps/server/src/routes/user-profile.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/phone/verify",
        "file": "apps/server/dist/apps/server/src/routes/user-profile.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "first",
        "file": "apps/server/node_modules/zod/src/v3/tests/map.test.ts"
      },
      {
        "method": "GET",
        "path": "second",
        "file": "apps/server/node_modules/zod/src/v3/tests/map.test.ts"
      },
      {
        "method": "GET",
        "path": "first",
        "file": "apps/server/node_modules/zod/src/v3/tests/map.test.ts"
      },
      {
        "method": "GET",
        "path": "second",
        "file": "apps/server/node_modules/zod/src/v3/tests/map.test.ts"
      },
      {
        "method": "POST",
        "path": "/",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "GET",
        "path": "/",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/approve",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/decline",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/waitlist",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/cancel",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/:requestId/extend",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "PATCH",
        "path": "/:requestId/reorder",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      },
      {
        "method": "POST",
        "path": "/promote",
        "file": "apps/server/dist/apps/server/src/modules/requests/requests.routes.js",
        "handler": "authGuard"
      }
    ]
  }
}